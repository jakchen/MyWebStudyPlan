网易微专业前端学习笔记http://www.jianshu.com/p/4ce1708ea072
浏览器：谷歌、火狐、safari、IE

3javascript
一种可以在浏览器中运行的脚本语言
主要用来实现在浏览器端的动作：1用户交互、2数据处理

HTML中的js：
1在head中定义函数
<script>
document.writh("<h1>hello world<h1>");
对象.动作
</script>
2<script src=""></script>
3在相应标记中定义动作、事件响应代码
<onXXX="alert('hi')">

桌面上的js:
node.js

变量:var hello_1 = "";

计算:
+-*/%;优先顺序()>++,-->*/%>+-
作比较:==;!=;>;<;>=;<+

判断:
if(){};if(){}else{};可以简写，可以嵌套（建议：在if和else后面永远放一堆{}）
多路分支:switch-case;
switch(t){
case1:
alert();
break;
case2:
alert();
break;
case3:
alert();
break;
default：alert();break;
};
逻辑运算：与&&;或||;非!;真值表;优先级:所有的逻辑运算符的优先级低于关系运算符;!>&&>||
条件运算符:N?n1:n2;

循环：
while(){};;循环嵌套;
do{}while();例子：翻转数字;
for(i=0;i<5;i=i+1){};计数循环
无限循环:while(ture){};do{}while(ture);for(;;){};
选择：如果有固定次数，用for；如果必须执行一次用do_while；其他情况用while

循环控制：break:跳出循环;continue:跳过当前循环步，进入循环的下一轮

函数：
函数是一段代码，可以调用；js中有很多内置函数；
定义函数：function fun_name(){};
function fun_name(a,b){};
调用:fun_name();fun_name(a,b);
返回值：function fun_name(){return;};

函数变量：var f = new Function("x","y","return x*y");等价于function f(x,y){return x*y;};函数可作为变量插入函数内

变量空间：
1定义在任何函数之外的变量属于全局(整个网页)空间，在网页的任何地方都可以使用；2定义在某个函数内部的变量属于局部(函数内部)空间，只在函数内部有效；3局部有和全局重名的变量时，采用局部的

数组:
var marks = new Array();marks[0]、marks[1]、marks[2]
创建数组:var a = new Array();var a = new Array(size);var a = new Array(d1,d2,...,dn);var a = [d1,d2,...,dn];
访问数组：[]运算符访问数组中的一个单元，a[0]可以读可以写；索引从0开始；a[x]=n直接创建了数组中的一个单元x，并且赋了值n;
数组运算：数组长度a.length给出数组a的长度，是其中最大的下标+1；.length可写,a.length=2;a[a.length]=n；数组转换为字符串
堆栈:.push();.pop()、队列:.push();.shift()、排序:从小到大.sort();倒序.reverse()；连接.concat();截取.slice(1,4);splice(开始位置,删除个数,插入元素...),可以删除，插入，替换

对象:
是一个属性集合，每个属性有自己的名字和值
创建对象var o = new Object();
var ciclr = {x:0,y:0,radius:2};
访问添加对象属性ciclr.x = 0;对象里面也可以加对象
删除对象属性delete ciclr.x;或ciclr.x=null;
遍历对象属性for(var x in o){},属性x;属性值o[x]

(构造函数this.o
原型对象prototype)不会

浏览器的全局对象是window，所有全局的变量实际上是window的成员
window.document表示浏览器窗口的HTML页面；document.write()将内容写入页面；页面中的元素就是document里的成员

事件处理器onMouseOver
body事件：onLoad,onUnload
简单对话框：alert();confirm();prompt();
状态栏:status= ;defaultStatus= ;

定时器事件setInterval('','1000');

面向对象
基本概念：类，对象；属性、方法
基本特性：继承、


2、JS
对一个值使用typeof操作符可能会返回下列某个字符串：

“undefined”：表示这个值未定义；
  出现场景：已声明未赋值的变量、获取对象不存在的属性、无返回值的函数的执行结果、函数的参数没有传入、void()
“boolean”：表示这个值是布尔值；
“string”：表示这个值是字符串；
“number”：表示这个值是数值；
“object”：表示这个值是对象或null；
“function”：表示这个值是函数；

类型系统：
标准类型：
内置对象
Object

3、DOM
DOM Core
DOM HTML
DOM Style
DOM Event
文档树：
  节点遍历
  节点类型 Element_Node 、Text_Node
  元素遍历

节点操作：
  获取节点
    getElementById
      element = document.getElementById(id)
    getElementsByTagName  动态的
      collection = element.getElementsByTagName(tagName)
      获取所有后代元素element.getElementsByTagName("*")
      collection[n]
    getElementsByClassName  动态的
      collection = element.getElementsByClassName(className)
      collection = element.getElementsByClassName(className1 className2)
      collection[n]
    querySelector/All 不是动态的
      list = element.querySelector/All(selector)
  创建节点
    element = document.createElement(TagName)
  修改节点
    element.textContent (IE9不支持)节点及其后代节点的文本内容
    element.innerText
  插入节点
    element.appendChild(achild)
    element.insertBefore(achild,referenceChild)
  删除节点
    element.removeChild(child)
  innerHTML 节点的HTML内容  建议仅用于新节点
    内存泄露
    安全问题

属性操作
  每个html属性对应相应的DOM对象属性
  property accessor
  getAttribute/setAttribute
  dataset
property accessor 属性访问器
  读
    input.className
    input["id"]
  写
    input.value="www.baidu.com"
    input.disabled=true
  类型
    转换过的实用对象
  特点
    通用性-名字异常
    扩展性差
    是实用对象
getAttribute/setAttribute
  读
    var attribute = element.getAttribute(attributeName)
    input.getAttribute("class")
  写
    element.setAttribute(name,value)
    input.setAttribute("value","www.baidu.com")
    input.setAttribute("disabled","")
  类型
    属性字符串
  特点
    仅字符串
    通用性好
dateset  自定义属性
  HTMLElement.dataset
  data-*属性集
  元素上保存数据
  <div data-id="123456" data-account-name="wwq"
        data-name="魏文庆" data-email="wwq123@163.com"
        data-mobile="13524543878">wwq</div>
  div.dataset.
    id="123456"
    accountName="wwq"

样式操作
  内嵌样式表
    element.sheet.cssRules[1].style.lineHeight
                             .selectorText
  内联样式表
    element.style.color
  外部样式表
    element.sheet
更新样式
  element.style.color = 'red'
    更新一个属性需要一条语句
    不是我们熟悉的CSS
  element.style.cssText = 'border-cloor:red;color:red;'
  样式混在逻辑中

  更新class (推荐使用)
    element.className += 'invalid'

换肤：一次更新很多元素的样式
  更换样式表
    element.href=""
  删除样式表
  添加样式表

获取样式
 element.style.color (style获取到的不一定是实际样式)

 var style = window.getComputedStyle(element)
  window.getComputedStyle(element).color
 IE9-使用element.currentStyle

DOM事件
点击一个DOM元素
键盘按下一个键
输入框输入内容
页面加载完成
  事件流
    事件传递过程：
      1、capture phase 捕获
      2、targer phase 事件触发
      3、bubble phase 冒泡过程
  事件注册
    事件注册
      eventTarget.addEventListener(type,listener[,useCapture])
        elem.addEventListener('click',functionName,false)
        elem.onclick = functionName
    取消事件注册
      eventTarget.removeEventListener(type,listener[,useCapture])
        elem.removeEventListener('click',functionName,false)
        elem.onclick = null 不建议用
    事件触发
      eventTarget.dispatchEvent(type)
        elem.dispatchEvent('click')
    浏览器兼容型IE6、7、8
      事件注册与取消
        attchEvent/detachEvent
      事件触发
        fireEvent(e)
      no capture无捕获阶段
  事件对象
    属性
      type
      target(srcElement)
      currentTarget
    方法
      stopPtopagation
        event.stopPtopagation()(W3C) 阻止冒泡
        event.cancelBubble=true(IE)
        event.stopImmediatePropagation()(W3C)
      preventDefault
        默认行为
          Event.preventDefault()(W3C)阻止默认行为
          Event.returnValue=false(IE)
      stopImmediatePropagation
  事件分类
    鼠标事件MouseEvent
      click         当用户按下并释放鼠标按键或其他方式“激活”元素时触发
      contextmenu   可以取消的事件，当上下文菜单即将出现时触发。当前浏览器在鼠标右击时显示上下文菜单
      dblclick      当用户双击鼠标时触发
      mousedown     当用户按下鼠标按键时触发
      mouseup       当用户释放鼠标按键时触发
      mousemove     当用户移动鼠标时触发
      mouseover     当鼠标进入元素时触发。relatedTarget(在IE中是fromElement)指的是鼠标来自的元素
      mouseout      当鼠标离开元素时触发。relatedTarget(在IE中是toElement)指的是鼠标要去往的元素
      mouseenter    类似mouseover，但不冒泡。IE将其引入，HTML5将其标准化，但尚未广泛实现
      mouseleave    类似mouseout，但不冒泡。IE将其引入，HTML5将其标准化，但尚未广泛实现
    MouseEvent对象
      属性
      clientX,clientY
      screenX,screenY
      ctrlKey,shiftKey,altKey,metaKey
      button(0,1,2)
    MouseEvent顺序
      从元素A上方移过
      点击元素
      例子-拖拽div
    WheelEvent滚轮事件
      WheelEvent对象
        属性
          dalteMode
          deltaX
          deltaY
          deltaZ
  FocusEvent
    blur 失去焦点
    focus  获得焦点
    focusin  将要获得焦点
    focusout  将要失去焦点
    属性
      relatedTarget
  InputEvent 输入事件
    beforeinput
    input/onpropertychange(IE)
  KeyboardEvent键盘事件
    keydown
    keyup
  KeyboardEvent对象
    属性
      key
      code
      ctrlKey,shiftKey,altKey,metaKey
      repeat
  其他事件
    Event
      load 加载完成
      unload 文档退出
      error
      select
      abort
    window
      load
      unload
      error
      abort
    Image
      load
      error
      abort
    UIEvent
      resize
      scroll
  事件代理

多媒体和图形编程：
audio video canvas
<audio src=""></audio>
  <sourse>.mp3</sourse>
  .wav
  .ogg
<video src="" width="" height=""><video>
控制多媒体播放：
方法
  load()加载媒体内容
  play()开始播放
  pause()暂停播放
属性
  playbackRate 播放速度0~4
  currentTime播放进度 s为单位
  volume音量 0~1
  muted静音 ture false
查询多媒体状态
布尔值
  paused 暂停
  seeking 跳转
  enden 播放完成

  duration 媒体时长
  initialTime 媒体开始时间

多媒体相关事件(12个)
loadstart 开始请求媒内容
loadmetadata 媒体元数据已经加载完成
canplay 加载了一些内容，可以开始播放
play 调用play()，或设置了autoplay
waiting 缓冲数据不够，暂停播放
playing 正在播放

canvas
<canvas id="can" width="" height=""></canvas>不建议用css指定宽高
渲染上下文
 var canvas = document.getElementById('can');
 var ctx = canvas.getContext('2d');
globalCompositeOperation属性 全局的组合操作
  ctx.globalCompositeOperation = "destination-over"
基本绘图的步骤：
清除画布-绘制图形-保存渲染上下文状态-绘制图形-恢复渲染上下文状态
https//developer.mozilla.org/enUS/docs/Web/API/Canvas API/Tutorial

BOM
属性：
navigator 浏览器信息
 platform:"Win32"
 userAgent:判断内核
location 浏览器定位和导航
  href
  方法：
    assign(url)载入新的url，记录浏览历史
    repacle(url)载入新的url，不记录浏览历史
    reload()重载当前页
history 窗口浏览器历史
  方法：
  back()
  forward()
  go()
screen 屏幕信息

方法：
alert(),confirem(),prompt() 三种对话框
  alert()警告框
  confirm()确定取消
  prompt()输入框 确定取消
setTimeout(),setInterval() 计时器
open(),close()开新窗口，关闭窗口

事件：
load 文档和所有图片加载完毕时
unload 离开当前文档时
beforeunload 和unload类似，但它提供询问用户是否确定离开的机会
resize 拖动改变浏览器窗口大小时
scroll 拖动滚动浏览器时

数据通信
HTTP协议：
请求报文格式
响应报文格式
常用HTTP方法：
  get 从服务器获取一份文档 不包含主体
  post 向服务器发送需要出来的数据 包含主体
  put 将请求的主体播放存储在服务器上 包含主体
  delete 从服务器上删除一份文档 不包含主体
URL构成：
HTTP版本：HTTP/1.1
常见HTTP状态码：
  200 请求成功。一般用于GET和POST方法。
  301 资源移动
  304 未修改
  400 请求语法错误，服务器无法理解
  404 未找到资源，可以设置个性404页面
  500 服务器内部错误

AJAX 异步js和xml
Ajax通信流程
XHR:
  属性：
    readyState：
    status：
    responseText:

JS动画：gif、flash、css3、js
帧
帧频
三要素：对象、属性、定时器
  var timeoutID = setInterval(func,delay)
  clearInterval(timeoutID)
  var timeoutID = setTimeout(func,[delay]) 只执行一次
  clearTimeout(timeoutID)
  requestAnimationFrame