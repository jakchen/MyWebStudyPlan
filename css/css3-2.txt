CSS3无前缀脚本
<script src=”http://leaverou.github.com/prefixfree/prefixfree.min.js”></script>

CSS3代码生成
http://www.css88.com/tool/css3Preview/

让IE678浏览器支持CSS3的一些属性box-shadow。：ie-css3.htc
 .box-shadow{box-shadow:0px 0px 10px red;
 behavior: url(ie-css3.htc);}

省略CSS前缀的方法：使用prefix-free插件
<script src="http://leaverou.github.com/prefixfree/prefixfree.min.js"></script>

CSS3选择器
  基本选择器
    *
    E
    #id
    .class
    s1,sN

    id选择器详解
      只用1次
      不能结合使用
      js需要用到id

    结合元素选择器
      a.class{}
    多类选择器
      .class.class{}
  层次选择器
    后代选择器
      E F{}
    子元素选择器
      E>F{}
    相邻兄弟选择器
      E+F{}
    通用兄弟元素选择器
      div ~ p {}
      用来指定位于同一个父元素之中的div元素之后的所有p兄弟元素使用样式
  动态伪类选择器
    a:link
    a:visited
    a:hover
    a:active/button:active
    E:focus
  目标伪类选择器
    :target
  语言伪类选择器
    E:lang
  UI元素状态伪类选择器 17种
    hover foucs active
    E:checked
    E:enabled E:disabled
  结构伪类选择器  允许开发者根据文档中的结构来指定元素样式
    E:first-child
    E:last-child
    E:nth-child(n) nth-child(odd)奇数 nth-child(even)偶数
    E:nth-last-child

    E:nth-of-type 只计算同类标签
    E:nth-last-of-type

    E:only-child
    :root
    :empty
  否定伪类选择器
    :not 除了   div *:not(h1)
  伪元素
    ::first-line
    ::first-letter
    ::before
    ::after
    a[href=#]::before{content:"内容"}
  属性选择器
    E[attr]
    E[attr=val]
    E[attr~=val]包含val，val为单词
    E[attr*=val]包含val
    E[attr^=val]开头val
    E[attr$=val]结尾val

  派生选择器
    通过依据元素在其位置的上下文关系来定义样式

边框
  border-width
  border-color
  border-style
  缩写 border:border-width  border-color  border-style;

  边框宽度
    border-width
  边框单边的宽度
    border-top-width
    border-right-width
    border-bottom-width
    border-left-width
  边框颜色
    border-color
  边框单边的颜色
    border-top-color
    border-right-color
    border-bottom-color
    border-left-color
  边框样式
    border-style:定义了10个不同的非继承样式，包括none
  边框的单边样式
    border-top-style
    border-right-style
    border-bottom-style
    border-left-style

  border-image 边框图片
    border-image:url() 1 2 3 4 repeat repeat;
    1234上右下左切九宫格
    水平垂直平铺方式(平铺repeated、铺满rounded、拉伸stretched)

  border-radius 圆角边框
    可以设置1~4个数值,也可以加/，
    上左、上右、下右、下左
    也可以拆分
      border-top-left-radius
      border-top-right-radius
      border-bottom-right-radius
      border-bottom-left-radius
    制作圆形，半圆形，扇形，椭圆

  box-shadow 边框阴影
    可以使用一个或多个投影，用","隔开
  box-shadow:inset？ X-offset Y-offset 模糊半径0~n 扩展半径 颜色;
    阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；

    阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。

背景
    纯色、背景图
    background-attachment  属性值scroll(默认值) fixed
    背景图像是否固定或者随页面的其余部分滚动
    background-color
    background-image
    background-position
    background- repeat  属性值repeat(默认值) repeat-x repeat-y no-repeat

    简写：background：color image repeat attachment position
          background：image repeat position

    css3背景
    background-size:规定背景图片的尺寸
      属性值auto <length> <%> cover contain
    background-origin：规定background-position的参考原点
      属性值padding-box border-box content-box
    background-clip：规定背景图片的绘制区域
      属性值padding-box border-box(默认值) content-box

    在一个元素中显示多个背景图像
      background：image repeat position,image repeat position;

文本
  字体
    font-family
    font-size
    font-size-adjust number : 为字体序列中所有字体强迫指定同一尺寸
    font-style  属性值normal italic oblique
    font-variant 属性值normal small-caps(小型大写字母)
    font-weight 属性值normal bold bolder lighter
    font-strech

    @font-face{font-family:myfont;
                src:url();}
  文本
    color
    direction 文本流入方向 属性值ltr(默认) rtl(从右向左) inherit
    line-height 属性值normal 长度值 % 数字
    text-align 属性值left right center justify
    vertical-align 属性值baseline(默认) sub super top middle bottom text-top text-bottom 20px 2em 20%...
      只作用于inline inline-block table-celle:<td>
    text-bottom top middle % length
    text-decoration 属性值none(默认值) underline overline line-through
      它是支持多值的。比方说：
      { text-decoration: underline overline; }
    text-indent 长度单位和%
    text-transform 文本大小写 属性值none uppercase lowercase capitalize(首字母大写)
    unicode-bidi
    white-space 定义文本间的空白符间距 属性值normal(默认) nowrap(空白符合并，换行符忽略) pre(都保留) pre-wrap(都保留) pre-line(空白符合并，换行符保留)
    word-spacing 定义单词间的间距 属性值normal(默认) length
    css3文本效果
    letter-spacing 定义字符间的间距 属性值normal(默认) length

    text-shadow:向文本添加阴影
      text-shadow:color x-offset y-offset 模糊半径
      text-shadow:#FF0000 5px 10px 2px ;

    text-overflow:clip/ellipsis 溢出文本属性
      clip:不显示省略标记，只简单裁切
      ellipsis:文本溢出时显示(...),+overflow:hidden;+white-space:nowrap;+定义width
    text-overflow属性起效果，必须同时具备overflow:hidden;+white-space:nowrap;+定义width

    word-wrap:normal/break-word 允许长的内容可以自动换行。
      normal:允许内容顶开或溢出指定的容器边界。
      break-word:内容将在边界内换行。如需要，单词内部允许断行。

    word-break:normal,keep-all,break-all
      break-all 允许在单词内换行。
      keep-all  只能在半角空格或连字符处换行。

    word-wrap 强调的是是否允许单词内断句，而word-break强调的则是怎么样来进行单词内的断句。
    word-wrap 是用来决定允不允许单词内断句的，如果不允许的话长单词就会溢出。最重要的一点是它还是会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话就进行单词内的断句。
    而word-break:break-all则更变态，因为它断句的方式非常粗暴，它不会尝试把长单词挪到下一行，而是直接进行单词内的断句。
    用了word-break:break-all，就等于使用粗暴方式来断句了。总之一句话，如果您想更节省空间，那就用word-break:break-all就对了！

颜色
  raba(0~255,0~255,0~255,0~1)
  opacity 透明属性0~1

盒模型
  盒子类型
    inline block inline-block
    inline-table行内表格  list-item列表

  盒子模型
    margin border padding content width height
  内边距
    padding
    padding-bottom
    padding-top
    padding-left
    padding-right
  外边距
    margin
    margin-top
    margin-bottom
    margin-left
    margin-right
  外边距合并
    外边距合并就是一个叠加的概念

  指定针对元素的宽度和高度的计算方法
    box-sizing:border-box/contnet-box

  对盒子中容纳不下的内容的显示
    overflow
      hidden
      scroll
      auto
      visible(默认)
      no-diaplay
      no-content
    overflow-x
    overflow-y

  自由缩放属性
    resize 用来改变元素尺寸大小 元素须使用overflow属性
      none
      both
      horizontal(仅改宽)
      vertical(仅改高)
      inheiit

  轮廓
    突出元素作用,用于元素获取到焦点或被激活时
    outline:outline-color, outline-style, outline-width
      outline-color
      outline-style
        outline-style: double;
      outline-width

      outline-style:none | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit
      outline-width:thin | medium | thick | <length> | inherit
  对盒子使用阴影
    box-shadow

布局：
  display：block|inline|inline-block|none
  block:默认宽度为父元素宽度，可设置宽高，换行显示
  inline：默认宽度为内容宽度，不可设置宽高，同行显示
  inline-block：默认宽度为内容宽度，可设置宽高，同行显示，整块换行
  none:设置元素不显示,不占据文档位置
  visibility：hidden;仍占据文档位置

定位：
  position：top|right|bottom|left|z-index;设置y元素边缘距离参照物边缘的距离，z-index设置Z轴上的排序,大在前面；z-index栈

  position：static|relative|absolute|fixed

  relative:相对定位,仍在文档流中，参照物为元素本身;使用场景：作为绝对定位元素的参照物

  absolute：绝对定位，默认宽度为内容宽度，脱离文档流，参照物为第一个定位祖先/根元素;使用场景：轮播头图

  fixed：固定定位，默认宽度为内容宽度，脱离文档流，参照物为视窗

  float：left|right
  默认宽度为内容宽度，脱离文档流，向指定方向一直移动;float的元素在同一文档流;
  float元素半脱离文档流：对元素，脱离文档流，对内容，在文档流

  clear：both|left|right
  应用于后续元素、块级元素
    使用：
      1加空白元素(clear: both;height: 0;overflow: hidden;visibility: hidden;)，
      2父元素clearfix(.clearfix:after{content:'.';display: block;clear: both;height: 0;overflow: hidden;visibility: hidden;})

伸缩布局盒模型flex
  Flex布局的主要思想是让容器能使其子元素的宽高（或其他属性）能够以最好的方式去填充可用空间（主要是去适应不同的设备跟分辨率）。
  Flexbox布局常用于小的应用程序组件之中
  能动态修改子元素宽高，以满足在不同尺寸屏幕下的恰当布局

  设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。
  弹性容器flex container
  弹性元素flex item
  主轴main axis
  副轴cross axis
  创建容器:display:flex;
  弹性元素:在文档流中的子元素

  一：有六个属性设置在box父容器上，来控制子元素的显示方式；
    flex-direction
    flex-wrap
    flex-flow
    justify-content
    align-items
    align-content

  特性：
  flex-direction：row|row-reverse|column|column-reverse弹性元素排列方向，决定主轴的对齐方向
    row（默认值）：主轴为水平方向，起点在左端。
    row-reverse：主轴为水平方向，起点在右端。
    column：主轴为垂直方向，起点在上沿。
    column-reverse：主轴为垂直方向，起点在下沿。

  flex-wrap:nowrap|wrap|wrap-reverse 子元素超过一行，如何换行
    nowrap（默认值）：默认不换行。
    wrap：换行，第二行在第一行下面，从左到右
    wrap-reverse：换行，第二行在第一行上面，从左到右；

  简写：flex-flow:<flex-direction>|<flex-wrap>建议使用
    默认是 row  nowrap

  justify-content:  子元素在主轴对齐方式
    flex-start（默认值）：左对齐
    flex-end：右对齐
    center： 居中
    space-between：两端对齐，项目之间的间隔都相等。
    space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

  align-items：交叉轴如何对齐
    flex-start：交叉轴的起点对齐。
    flex-end：交叉轴的终点对齐。
    center：交叉轴的中点对齐。
    baseline: 项目的第一行文字的基线对齐。
    stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

  align-content:属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。(设置cross-axis方向上 行 对齐方式)
    flex-start：与交叉轴的起点对齐。
    flex-end：与交叉轴的终点对齐。
    center：与交叉轴的中点对齐。
    space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
    space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
    stretch（默认值）：轴线占满整个交叉轴。

  二   有六个属性设置在子元素项目上：
    order
    flex-grow
    flex-shrink
    flex-basis
    flex
    align-self

    order：默认（0） 值越小越靠前，

    flex-grow 放大比例,默认是0,当有放大空间的时候，值越大，放大的比例越大

    flex-shrink:缩小比例  默认是1  值越大，缩小的时候比例越小；负值对该属性无效。

    flex-basis:main-size|<width>
    设置flex item的初始宽/高
    (定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。)

     flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。

     align-self：auto|flex-start|flex-end|center|baseline|stretch 设置单个flex item在cross-axis方向上对齐方式

多列布局
  columns: columns-width | columns-count
    column-width  列宽 auto | <length>px
    column-count  列数 1~n
  column-gap  列间隔 normal | <length>px em
  column-rule  复合属性 列边框
    column-rule-width
    column-rule-style
    column-rule-color
  column-fill  设置列的高度是否统一 auto | balance
  column-span  设置是否横跨所有列 none | all

渐变

变形
  transform:none|<transform-function> [,<transform-function>]
    可用于内联元素和块元素，多个变形函数，用空格分开
    例如：transform:translate(50%) rotate(45deg);

  2d变形 translate() scale() rotate() skew()

    变形函数：5个
    translate(50px,20%) 偏移
      translateX():
      translateY():

    scale(<number>[,number]?) 缩放 scale(0.8,1.5)
      scaleX(<number>);
      scaleY(<number>);

    rotate(45deg) 旋转 正负值

    skew(<angle>[,<angle>]?) 倾斜 skew(30deg,30deg)
      skewX:(<angle>);
      skewY:(<angle>);

    matrix() 矩阵变形

    默认情况，变形的原点在元素的中心的。
    旋转、缩放、倾斜都可以重置原点

    设置坐标轴心transform-origin:[left|center|right|top|bottom|<%>|<length>]

      transform-origin:50% 50%;默认值
      transform-origin:0 0;  x0，y0
      transform-origin:20%;  x20%,y50%
      transform-origin:right 50px 20px;  x y50px,z20px,
      transform-origin:top right 20px;

  3d变形 translate3d() scale3d() rotate3d()
        translateZ(length) 正负值
        scaleZ(<number>)
        rotaleX(<angle>)
        rotaleY(<angle>)
        rotaleZ(<angle>)

    perspective:none|<length> 透视
      取值越小，3D效果越明显 perspective属性都应用在父元素上
    perspective-origin：[left|center|right|top|<%>|<length>]
      透视位置 定义父元素 需要与perspective属性结合起来使用，该属性允许您改变 3D 元素的底部位置。
      perspective-origin:50% 50%;默认值
      perspective-origin:left bottom;
      perspective-origin:50% -800px;
      perspective-origin:right;

    translate3d(tx,ty,tz) 3d移动
      translateZ(length) 正负值

      例如：transform:translate3d(10px,20%,50px);

    scale3d(<number>,<number>,<number>);3d缩放
      scaleZ(<number>)

      transform:scale3d(1.2,1.2,1)

    rotate3d(<number>,<number>,<number>,<angle>);3d旋转
      rotaleX(<angle>)
      rotaleY(<angle>)
      rotaleZ(<angle>)

      transform:rotate3d(1,0,0,45deg)

    旋转元素背面不可见backface-visibility:visible 可见| hidden
      定义当元素不面向屏幕时是否可见。

    保留3d空间transform-style:flat|preserve-3d flat扁平化（默认值）|保留3d空间
    应用在3D变换的兄弟元素们的父元素上

过渡
  transition:<过渡属性> <过渡时间> <过渡函数> <延迟时间>;
  多个过渡用","隔开
  从一种样式转换成另一种样式,只要样式发生变化，就能触发过渡

  指定过渡属性 transition-proterty:none | all | 其他属性
  过渡时间 transition-duration:<time>[,<time>]* s 或 ms
  定义时间函数 transition-timing-function:ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(<number>,<number>,<number>,<number>)|step-start|step-end|steps(<integer>[,[star|end]]?)
   延时 transition-delay:<time>[,time]*

动画 8个子属性
  制作动画步骤
    1：用关键帧声明一个动画
      @keyframes animation-name{0%{属性和值}100%{属性和值}}
    2：在animation 属性中调用关键帧声明的动画

  animation:rotate 5s 5s linear infinite both;

    调用动画 animation-name:none | IDENT
      none:默认值,没有任何动画效果，可用于覆盖任何动画
      IDENT：由@keyframes创建的动画名称

        例如
        animation-name:none;
        animation-name:abd;
        animation-name:abc,abcd;

    动画播放时间 animation-duration:<time>[,<time>]* 单位为s;默认值为0，也即没有动画效果

    动画播放方式 animation--timing-function:ease linear ease-in ease-out ease-in-out cubic-bezier(a,b,c,d),ease linear ease-in ease-out ease-in-out cubic-bezier(a,b,c,d)

    动画延时 animation-delay:<time>[,<time>]*

    动画执行次数 animation-iteration-count:infinite(无限次)|<number> 默认值1

    定义动画方向 animation-direction:normal|reverse|alternate|alternate-reverse
      normal  默认值。每次循环都向前播放
      reverse 动画反向播放。
      alternate 动画在奇数次正向播放，在偶数次反向播放。
      alternate-reverse 动画在奇数次反向播放，在偶数次正向播放。

    播放状态 animation-play-state:running|paused
      running 默认值 播放
      paused 暂停

    是否保持第一帧设置、最后一帧状态animation-fill-mode:none|backwards|forwards|both*
      none：默认值。不设置对象动画之外的状态
      forwards：设置对象状态为动画结束时的状态
      backwards：设置对象状态为动画开始时的状态
      both：设置对象状态为动画结束或开始的状态

响应式Responsive设计
  媒体类型 all screen print

  <link type="text/css" rel="stylesheet" href="style.css" media="only screen and (max-width:640px)">
  @media screen and (max-width: 600px) {}

  @media (min-width: 768px) {}
  @media (min-width: 992px) {}
  @media (min-width: 1200px) {}

   <meta name="viewport" content="width=device-width, initial-scale=1">

  响应式图片？
    img{max-width:100%;}

使用服务器端字体
  字体下载
    http://www.dafont.com/
    https://fonts.google.com/

  格式
    TureTpe(.ttf)格式
    OpenType(.otf)格式
    Web Open Font Format(.woff)格式
    Embedded Open Type(.eot)格式
    SVG(.svg)格式

  @font-face{
  font-family:自定义字体名称;
  src:url("")format("truetype");/* ttf otf */
  font-weight:
  font-style:
  font-size:
  font-stretch：
  }
  @font-face{
  font-familt:Arial;
  scr:local("Arial"),
      url("");
  }


