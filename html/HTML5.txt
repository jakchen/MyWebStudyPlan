IE9以下版本浏览器兼容HTML5的方法，使用本站的静态资源的html5shiv包：
<!--[if lt IE9]>
<script src="http://cdn.static.runoob.com/libs/html5shiv/3.7/html5shiv.min.js"></script>
<![endif]-->
html5shiv.js 引用代码必须放在 <head> 元素中，因为 IE 浏览器在解析 HTML5 新元素时需要先加载该文件。
载入后，初始化新标签的CSS：
/*html5*/
article,aside,dialog,footer,header,section,footer,nav,figure,menu{display:block}

HTML5 定了8个新的HTML语义（semantic）元素。所有这些元素都是块级元素。
为了能让旧版本的浏览器正确显示这些元素，你可以设置CSS的display 属性值为 block:
header, section, footer, aside, nav, main, article, figure {
    display: block;
}

HTML5新增的结构元素
  section、article、aside、header、hgrounp、footer、nav、figure
新增的其他元素
  video、audio、canvas
新增的input元素的类型
  email、url、number、range、Date Pickers
废除的元素
  不再使用frame框架

新增的属性：
  表单相关的属性
  链接相关的属性
  其他属性
废除的属性：

全局属性：
  contentEditable属性 true可编辑
  designMode属性  整个页面是否可编辑
  hidden属性
  spellcheck属性
  tabindex属性  获得焦点

HTML5 新增的主体结构元素 ：
<article> 元素代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客或者报刊中的文章，一篇论坛帖子、一段用户评论或独立的插件，或其他任何独立的内容。
<article> 元素是可以嵌套使用的。
<article> 元素可以用来表示插件

Section元素用于对网站或应用程序中页面上的内容进行分块。一个section元素通常由内容及其标题组成。但section使用并非一个普通的容器元素；当一个容器需要被直接定义样式或通过脚本定义行为时，推荐使用div而非section元素。

通常不推荐没有标题内容使用section元素
使用总结：
  1不要将section元素作为设置样式的页面容器
  2如果article元素、aside元素、nav元素更符合使用条件，那不要使用section元素
  3没有标题内容，不要使用section元素

nav元素是一个可以用作页面导航的连接组，其中的导航元素链接到其他页面或当前页面的其他部分。并不是使用的连接组都要被放进nav元素，只需要将主要的、基本的连接组放进nav元素即可。

nav元素应用场景：
  传统导航条
  侧边栏导航
  页内导航
  翻页操作

aside元素用来表示当前页面或文章的附属信息部分，它可以包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类似的有区别于主要内容的部分。

time元素与微格式

<time> 标签定义日期或时间，或者两者。<time>9:00</time>
<time datetime="2008-02-14">情人节</time>

datetime属性：定义元素的日期和时间。
pubdate属性：指示 <time> 元素中的日期/时间是文档（或最近的前辈 <article> 元素）的发布日期

HTML5 新增的非主体结构元素：

header元素是一种具有引导和导航作用的结构元素，通常用来放置整个页面或页面内的一个内容区块的标题，但是也可以包含其他内容，例如数据表格、搜索表单或相关的logo图片。
header元素可以出现多次

footer元素可以作为其上层父级内容区块或是一个根区块的脚注。footer通常包括其相关的脚注信息，如作者、相关阅读链接及版权信息等。
提示：假如您使用 footer 来插入联系信息，应该在 footer 元素内使用 <address> 元素。

hgroup元素是将标题及其子标题进行分组的元素。hgroup元素通常会将h1~h6元素进行分组，譬如一个内容区块的标题及其子元素算一组。
标题较多，需要进行分组。

address元素用来在文档中呈现联系信息，包括文档作者或文档维护者的名字、他们的网站链接、电子邮箱、真实地址、电话号码等。Address应该不只用来呈现电子邮箱或真实地址，还用来展示根文档相关的联系人的所有联系信息。

HTML5结构，大纲编排的规则
  1显示编排内容区域块 明确使用section等元素
  2隐示编排内容区域块 不明确使用section
  3标题分级
  4不同区域块使用相同标题

HTML5 表单新增元素与属性:

  form 属性和 formaction 属性
表单内的从属元素必须书写在表单内部，而在 HTML5 中，可以把他们书写在页面上任何地方，然后为该元素指定一个 form 属性，属性值为该表单的id，这样就可以声明该元素从属于指定表单了。

在HTML4中，一个表单内的所有元素只能通过表单的action属性被统一提交到另一个页面，而在HTML5中可以为所有的提交按钮，增加不同的formaction属性，使单击不同的按钮时可以将表单提交到不同的页面

  formmethod 和 formenctype 属性
在HTML4中，一个表单内只能有一个action属性用来对表单内所有元素统一指定提交页面，所有表单内页只有一个method属性来统一指定提交方法。在HTML5中，可以使用formmethod属性来对每一个表单元素分别指定不同的提交方法。

在HTML4中，表单元素具有一个enctype属性，该属性用于指定在表单发送到服务器之前应该如何对表单内的数据进行编码。
在HTML5中，可以使用formenctype属性对表单元素分别指定不同的编码方式。
  formenctype="text/plain" 将空格转换为 "+"符号，但不编码特殊字符。
  formenctype="multipart/form-data" 不对字符编码。当使用有文件上传控件的表单时，该值是必需的。
  application/x-www-form-urlencoded 在发送前对所有字符进行编码（默认）。

  formtarget 属性和 autofocus 属性
在HTML4中，表单元素具有一个target属性，该属性用于指定在何处打开表单提交后所需要加载的页面。
在HTML5中，可以对多个提交按钮分别使用formtarget属性来指定提交后在何处打开所需加载的页面。

为文本框、选择框或按钮控件加上autofocus属性，当画面打开时，该控件自动获得光标焦点。<input type="text" autofocus>

  required 属性和 labels 属性
HTML5中新增的required属性可以应用在大多数输入元素上，在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字。required="required"

在HTML5,为所有 可使用标签的表单元素、button、select元素等，定义一个labels属性，属性值为一个NodeList对象，代表该元素所绑定的标签元素所构成的集合。
<label> 标签为 input 元素定义标签（label）。
label 元素不会向用户呈现任何特殊的样式。不过，它为鼠标用户改善了可用性，因为如果用户点击 label 元素内的文本，则会切换到控件本身。
<label> 标签的 for 属性应该等于相关元素的 id 元素，以便将它们捆绑起来。

标签的control属性
在HTML5中，可以在标签内部放置一个表单元素，并且通过该标签的control属性来访问该表单元素

文本框的placeholder属性
Placeholder是指当文本框处于未输入状态时显示的输入提示。当文本框处于未输入状态且未获取光标焦点时，模糊显示输入提示文字。

文本框的list属性
在HTML5中，为单行文本框增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML5中新增的元素，该元素类似于选择框，但是当用户想要设定的值不在选择列表之内时，允许自行输入。datalist元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。<datalist><option value="http://www.google.com" > http://www.google.com </option></ datalist >

文本框的autocomplete属性
帮助输入所用的自动完成功能，是一个既节省输入时间又十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以在安全方面存在缺陷，只要使用autocomplete属性，安全性方面也可以得到很好的控制。
Autocomplete = “on” 默认。规定启用自动完成功能。
Autocomplete = “off规定禁用自动完成功能。
”
文本框的pattern属性
在HTML5中，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会针对这些进行检查，检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。

文本框的selectiondirection属性
这对input元素与textarea元素，HTML5增加了selectiondirection属性。当用户在这两个元素中用鼠标选取部分文字时，可以使用该属性来获取选取方向。当用户正向选取文字时，该属性值为”forward”，当用户反向选取文字时，该属性值为”backward”。当用户没有选取任何文字时，该属性值为”forward”。

复选框的indeterminate属性
对于复选框checkbox元素来说，过去只是选取与非选取这两种状态。在HTML5中。可以在JavaScript脚本代码中对该元素使用indeterminate属性，以说明复选框处于“尚未明确是否选取”状态。Checkbox.indeterminate = true;

image提交按钮的height属性与width属性
针对类型为image的input元素，HTML5新增了两个属性，height、width分别用来指定图片按钮的高度和宽度。

HTML5 改良的 input 元素的种类
增加与改良的input元素
1、  url类型、email类型、date类型、time类型、datetime类型、datetime-local类型、month类型、week类型、number类型、range类型、search类型、tel类型、color类型
<input type="number" value="15" min="10" max="100" step="5">

output元素:
<script>
function value_change(){
  var number = document.getElementById("range").value;
  document.getElementById("output").value=number;
}
</script>
<input type="range" id="range" min="0" max="100" step="5" value="10" onchange="value_change()">
<output id="output">10</output>

表单验证：

HTML5 增强的页面元素：
<figure> 标签用于对元素进行组合。提示：请使用 <figcaption> 元素为元素组添加标题。

<details> 标签用于描述文档或文档某个部分的细节。提示：与 <summary> 标签配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。注释：details 元素可用于描述文档的任何部分。

<mark> 标签定义带有记号的文本。请在需要突出显示文本时使用 <m> 标签。

progress元素和meter元素
正在进行的下载：
提示：请结合 <progress> 标签与 JavaScript 一同使用，来显示任务的进度。
注释：Internet Explorer 9 以及更早的版本不支持 <progress> 标签。
<meter> 标签定义度量衡。仅用于已知最大和最小值的度量。
  <meter value="3" min="0" max="10">3/10</meter>
  <meter value="0.8">60%</meter>
  IE 浏览器不支持 meter 标签。

ol、dl、cite、small

HTML5编辑API之Range对象:

HTML5音频播放
1、Audio音频
  HTML5提供了播放音频文件的标准
2、control控制器
  control属性供添加播放、暂停和音量控件
3、标签：
  <audio>定义声音
  <source>规定多媒体资源，可以是多个

编解码工具：mp4-ogg
FFmpeg
官网:www.ffmpeg.org

视频播放
1、Video视频
  HTML5提供了播放音频文件的标准
2、control控制器
  control属性供添加播放、暂停和音量控件
3、标签：
  <video>定义声音
  <source>规定多媒体资源，可以是多个
4、属性
  width
  height

HMTL5拖放:
1、HTML5拖放：
  拖放(Drag和drop)是HTML5标准的组成部分；
  设置元素可拖放，即把 draggable属性设置为 true：
  (注意：在大多数浏览器中，a元素和img元素默认就是可以拖放的，但是为了保险起见，最好还是加上draggable属性。)
2、拖放开始：
  ondragstart：调用了一个函数，drag(event)，它规定了被拖放的数据
3、设置拖动数据：
  setData()：设置被拖数据的数据类型和值
4、放入位置：
  ondragover：事件规定在何处放置被拖动的数据
5、放置：
  ondrop：当放置被拖数据时，会发生drop事件

Canvas标签
https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D

HTML5 SVG
SVG介绍:
•SVG 指可伸缩矢量图形 (Scalable Vector Graphics)
•SVG 用来定义用于网络的基于矢量的图形
•SVG 使用 XML 格式定义图形
•SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失
•SVG 是万维网联盟的标准

SVG绘制矢量图形：
MDN SVG API/教程

引入SVG外部文件:

HTML5 File API
HMTL5 File API简介：
HTML5 File API协议族
  Directories and System 文件系统和目录读取
  FileWriter 写入文件
  FileReader 读取文件
  File API 页面选择文件处理
实现文件列表功能
操作栏的创建及WebFont的使用
使用对话框创建文件夹

HTML5 Web存储
客户端存储数据的新方法
  localStorage 方法 没有时间限制的数据存储
  sessionStorage 方法 针对一个session的数据存储，浏览器关闭数据被清除
与cookie对比：
  之前，这些都是由cookie完成的。但是cookie不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得cookie速度很慢而且效率也不高
localStorage 审查元素
  localStorage.text
sessionStorage
  sessionStorage.num

HTML5 应用缓存与Web Workers
应用缓存:
  HTML5 引入了应用程序缓存，这意味着web应用可进行缓存，并可在没有因特网连接时进行访问。
应用程序缓存为应用带来三个优势：
  1.离线浏览 - 用户可在应用离线时使用它们
  2.速度 - 已缓存资源加载得更快
  3.减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。
实现缓存:
  如需启用应用程序缓存，请在文档的<html>标签中包含manifest属性
  manifest文件的建议的文件扩展名是：".appcache"
Manifest 文件:
manifest文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。
manifest 文件可分为三个部分：
  CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存
  NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存
  FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）
更新缓存:
一旦应用被缓存，它就会保持缓存直到发生下列情况：
  用户清空浏览器缓存
  manifest 文件被修改（参阅下面的提示）
  由程序来更新应用缓存

Web Workers
web worker是运行在后台的JavaScript，独立于其他脚本,不会影响页面的性能。
方法：
  postMessage() 它用于向HTML页面传回一段消息
  termainate() 终止 web worker，并释放浏览器/计算机资源
事件：
  onmessage

HTML5服务器推送事件-及时更新浏览器内容
介绍：
服务器推送事件(Server-sent Events)是HTML5规范中的一个组成部分，可以用来从服务端实时推送数据到浏览器端。

传统的服务器端推送数据技术：
1WebSocket 规范是 HTML5中的一个重要组成部分，已经被很多主流浏览器所支持，也有不少基于WebSocket开发的应用。正如名称所表示的一样，WebSocket 使用的是套接字连接，基于 TCP 协议。使用 WebSocket 之后，实际上在服务器端和浏览器之间建立一个套接字连接，可以进行双向的数据传输。WebSocket的功能是很强大的，使用起来也灵活，可以适用于不同的场景。不过 WebSocket技术也比较复杂，包括服务器端和浏览器端的实现都不同于一般的 Web 应用。

2HTTP协议：简易轮询，即浏览器端定时向服务器端发出请求，来查询是否有数据更新。这种做法比较简单，可以在一定程度上解决问题。不过对于轮询的时间间隔需要进行仔细考虑。轮询的间隔过长，会导致用户不能及时接收到更新的数据；轮询的间隔过短，会导致查询请求过多，增加服务器端的负担。

实现： php.net 安装php服务器/安装IDE-php storm
1服务器代码头
  header('Content-Type:text/event-stream');
2EventSource事件 -参考MDN API/使用服务器发送事件/EventSource
  onopen 当通往服务器的连接被打开
  onmessage 当接收到消息
  onerror 当错误发生

响应式布局
介绍：
响应式布局是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。
优点：
  面对不同分辨率设备灵活性强
  能够快捷解决多设备显示适应问题
缺点：
  兼容各种设备工作量大，效率低下
  代码累赘，会出现隐藏无用的元素，加载时间加长

基本实现：
1CSS3中的Media Query(媒体查询)
  设备宽高：device-width,device-height
  渲染窗口的宽与高：width,height
  设备的手持方向：orientation
  设备的分辨率：resolution
2使用方法：
  外联
  内嵌样式
实例
<meta name="viewport" content="width=device-width,initial-scale=1">
  <!-- 原比例缩放 -->
<link type="text/css" rel="stylesheet" href="style.css" media="only screen and (max-width:640px)">
@media screen and (max-width: 600px) {}

HTML5响应式布局之Bootstrap
了解Bootstrap：
  简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。
优点
  快速、简单、灵活的栅格系统、小而强大、响应式布局、跨平台等
下载

Bootstrao CSS、组件与JavaScript插件：
使用Bootstrap:

使用HTML5构建应用布局和页面
HTML5在移动开发中的准则：
  尽量使用单页面开发(SPA)
  慎重选择前端UI框架
  动画、特性使用准则(60fps)
    浏览器消耗最小的CSS属性
      位置-transform:translate(x,y,z)
      大小-transform:scale(n)
      旋转-transform:rotate(deg)
      透明度-opacity:0.1
    http://csstriggers.com 详细记录了每个CSS属性发生变化的时候，浏览器或硬件所需要进行的操作
  长度单位使用rem

页面基本布局构成：
  流式布局-适合内容型应用
  绝对定位布局-适合交互类应用
  Flexbox布局-适合局部使用(Android 4.1+ IOS7+)
  CSS Grid layout(2015年3月WD chorme)
构建详细的内容列表
实现手机点击事件

